syntax = "proto3";

package networking.enterprise.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "google/protobuf/wrappers.proto";
import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/traffic_policy.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/weighed_destination.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/request_matchers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
* A route specifies how to match a request and what action to take when the request is matched.
*
* When a request matches on a route, the route can perform one of the following actions:
* - *Route* the request to a destination
* - Reply with a *Direct Response*
* - Send a *Redirect* response to the client
* - *Delegate* the action for the request to one or more [`RouteTable`]({{< ref "/reference/api/github.com.solo-io.gloo-mesh.api.enterprise.networking.v1beta1.route_table.md" >}}) resources
* DelegateActions can be used to delegate the behavior for a set out routes to
* `RouteTable` resources.
*/
message Route {
    // The name provides a convenience for users to be able to refer to a route by name.
    // It includes names of VS, Route, and RouteTable ancestors of the Route.
    string name = 1;
    
    // Matchers contain parameters for matching requests (i.e., based on HTTP path, headers, etc.).
    // If empty, the route will match all requests (i.e, a single "/" path prefix matcher).
    // For delegated routes, any parent matcher must have a `prefix` path matcher.
    repeated .networking.mesh.gloo.solo.io.HttpMatcher matchers = 2;

    // The Route Action defines what action the proxy should take when a request matches the route.
    oneof action {
        // This action is the primary action to be selected for most routes. The RouteAction tells the proxy to
        // route requests to an upstream.
        RouteAction route_action = 3;

        // Redirect actions tell the proxy to return a redirect response to the downstream client.
        RedirectAction redirect_action = 4;

        // Return an arbitrary HTTP response directly, without proxying.
        DirectResponseAction direct_response_action = 5;

        // Delegate routing actions for the given matcher to one or more RouteTables.
        DelegateAction delegate_action = 6;

    }

    // Route Options extend the behavior of routes.
    // Route options include configuration such as retries, rate limiting, and request/response transformation.
    // RouteOption behavior will be inherited by delegated routes which do not specify their own `options`
    .networking.mesh.gloo.solo.io.TrafficPolicySpec.Policy options = 7;

    // RouteActions are used to route matched requests to upstreams.
    message RouteAction {
        // Defines the destination upstream for routing
        // Some destinations require additional configuration for the route (e.g. AWS upstreams require a function name
        // to be specified).
        repeated .networking.mesh.gloo.solo.io.WeightedDestination destinations = 1;
    }

}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// Notice: RedirectAction is copied directly from https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
message RedirectAction {
    // The host portion of the URL will be swapped with this value.
    string host_redirect = 1;

    oneof path_rewrite_specifier {
        // The path portion of the URL will be swapped with this value.
        string path_redirect = 2;

        // Indicates that during redirection, the matched prefix (or path)
        // should be swapped with this value. This option allows redirect URLs be dynamically created
        // based on the request.
        //
        //   Pay attention to the use of trailing slashes as mentioned in
        //   `RouteAction`'s `prefix_rewrite`.
        string prefix_rewrite = 3;
    }
    
    // The HTTP status code to use in the redirect response. The default response
    // code is MOVED_PERMANENTLY (301).
    RedirectResponseCode response_code = 4;
    
    // The scheme portion of the URL will be swapped with "https".
    bool https_redirect = 5;
    
    // Indicates that during redirection, the query portion of the URL will
    // be removed. Default value is false.
    bool strip_query = 6;

    enum RedirectResponseCode {
        // Moved Permanently HTTP Status Code - 301.
        MOVED_PERMANENTLY = 0;

        // Found HTTP Status Code - 302.
        FOUND = 1;

        // See Other HTTP Status Code - 303.
        SEE_OTHER = 2;

        // Temporary Redirect HTTP Status Code - 307.
        TEMPORARY_REDIRECT = 3;

        // Permanent Redirect HTTP Status Code - 308.
        PERMANENT_REDIRECT = 4;
    }
}

// TODO: Shuold we be using v4alpha now? https://github.com/envoyproxy/envoy/blob/5a8bfa20dc3c85ecb61826d122696ecaa75dffa0/api/envoy/config/route/v4alpha/route_components.proto#L1396
// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DirectResponseAction is copied directly from https://github.com/envoyproxy/envoy/blob/master/api/envoy/api/v2/route/route.proto
message DirectResponseAction {
    // Specifies the HTTP response status to be returned.
    uint32 status = 1;

    // Specifies the content of the response body. If this setting is omitted,
    // no body is included in the generated response.
    //
    // Note: Headers can be specified using the Header Modification feature in the enclosing
    // Route, ConnectionHandler, or Gateway options.
    string body = 2;
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
// DelegateActions are used to delegate routing decisions to other resources, for example RouteTables.
message DelegateAction {
    
    // Delegate to the RouteTable resources with matching `name` and `namespace`.
    repeated .core.skv2.solo.io.ObjectRef refs = 1;

    // Delegate to the RouteTables that match the given selector.
    .core.skv2.solo.io.ObjectSelector selector = 2;
}
